# ================================================================================================
# OP TRADING PLATFORM - ENVIRONMENT CONFIGURATION TEMPLATE
# ================================================================================================
# Version: 3.0.0 - Complete Configuration Template
# Generated: 2025-08-25 2:28 PM IST
# Mode: TEMPLATE (Update all values marked with "your_*_here")
# 
# This is a template file showing all possible configuration options.
# Copy this to .env and update the values marked with "your_*_here"
# 
# CRITICAL: Never commit actual credentials to version control
# ================================================================================================

# ================================================================================================
# CORE DEPLOYMENT CONFIGURATION
# ================================================================================================

# Deployment mode - determines all system behavior and resource allocation
# first_time: Basic setup with mock data, minimal resources, learning mode
# development: Live data, debugging enabled, hot reload, development tools
# production: Optimized performance, security hardened, monitoring enabled
DEPLOYMENT_MODE=development

# Environment identifier for service discovery and distributed logging
ENV=development

# Application version for deployment tracking and rollback management
VERSION=3.0.0

# Debug mode configuration - CRITICAL for security in production
# Enables: Detailed logging, stack traces, development endpoints, hot reload
# SECURITY WARNING: Must be false in production environments
DEBUG=true

# ================================================================================================
# LOGGING AND MONITORING CONFIGURATION  
# ================================================================================================

# Logging level determines verbosity of application logs
# DEBUG: Extremely verbose, performance impact
# INFO: Standard operational logging (recommended for production)
# WARNING: Only warnings and errors
# ERROR: Only errors and critical issues
LOG_LEVEL=INFO

# Structured logging enables advanced log analysis and monitoring
ENABLE_STRUCTURED_LOGGING=true
LOG_FORMAT=json
INCLUDE_TRACE_ID=true
INCLUDE_REQUEST_ID=true
INCLUDE_USER_ID=true

# Log retention and archival settings
LOG_RETENTION_DAYS=90
LOG_ARCHIVE_ENABLED=true
LOG_COMPRESS_ARCHIVES=true

# ================================================================================================
# DATA SOURCE AND MARKET DATA CONFIGURATION
# ================================================================================================

# Primary data source determines where market data originates
# live: Real-time data from Kite Connect API (requires valid credentials)
# mock: Simulated realistic market data for testing and development
# hybrid: Live data when available, automatic fallback to mock data
DATA_SOURCE_MODE=live

# Mock data configuration for testing and development scenarios
MOCK_DATA_ENABLED=false
MOCK_DATA_VOLATILITY=0.2
MOCK_DATA_SEED=42
ENABLE_REALISTIC_MOCK_PATTERNS=true

# Market timing and trading session configuration
TIMEZONE=Asia/Kolkata
MARKET_TIMEZONE=Asia/Kolkata
MARKET_OPEN_TIME=09:15
MARKET_CLOSE_TIME=15:30
MARKET_PREOPEN_TIME=09:00
ENABLE_PREMARKET_DATA=true

# ================================================================================================
# PERFORMANCE OPTIMIZATION CONFIGURATION
# ================================================================================================

# Memory mapping enables high-performance file access for large datasets
# Recommendation: Enable for systems with 8GB+ RAM and SSD storage
# Performance impact: 3-5x faster file I/O operations
USE_MEMORY_MAPPING=true
MEMORY_MAPPING_CACHE_SIZE_MB=512

# Data compression reduces storage requirements and network bandwidth
# Level 1: Fast compression, larger files
# Level 6: Balanced compression and speed (recommended)
# Level 9: Maximum compression, slower processing
COMPRESSION_ENABLED=true
COMPRESSION_LEVEL=3
COMPRESSION_ALGORITHM=gzip

# Buffer sizes for optimal I/O performance based on system capabilities
# Larger buffers = better performance but more memory usage
# Recommendations based on available memory:
# <4GB RAM: 4KB-8KB buffers
# 4-8GB RAM: 8KB-16KB buffers  
# >8GB RAM: 16KB-32KB buffers
CSV_BUFFER_SIZE=8192
JSON_BUFFER_SIZE=16384
BUFFER_FLUSH_INTERVAL_SECONDS=30

# Resource allocation limits prevent system overload
MAX_MEMORY_USAGE_MB=2048
MEMORY_WARNING_THRESHOLD_PERCENT=80
MEMORY_CLEANUP_THRESHOLD_PERCENT=90
PROCESSING_BATCH_SIZE=500
PROCESSING_MAX_WORKERS=4

# ================================================================================================
# ENHANCED OPTIONS ANALYTICS CONFIGURATION
# ================================================================================================

# Strike offset configuration for options analysis
# DEFAULT: Conservative analysis with nearby strikes
# EXTENDED: Comprehensive analysis with wider strike range
DEFAULT_STRIKE_OFFSETS=-2,-1,0,1,2
EXTENDED_STRIKE_OFFSETS=-5,-4,-3,-2,-1,0,1,2,3,4,5
ACTIVE_STRIKE_OFFSETS=-2,-1,0,1,2

# Dynamic strike expansion based on market volatility
DYNAMIC_STRIKE_OFFSETS=true
STRIKE_EXPANSION_VIX_THRESHOLD=25

# Advanced analytics features - comprehensive market analysis
ENABLE_OPTION_FLOW_ANALYSIS=true
ENABLE_UNUSUAL_ACTIVITY_DETECTION=true
ENABLE_SENTIMENT_ANALYSIS=true
ENABLE_VIX_CORRELATION=true
ENABLE_SECTOR_BREADTH=true
ENABLE_GREEK_CALCULATIONS=true

# Market participant analysis - institutional vs retail behavior
ENABLE_FII_ANALYSIS=true
ENABLE_DII_ANALYSIS=true
ENABLE_PRO_TRADER_ANALYSIS=true
ENABLE_CLIENT_ANALYSIS=true

# Price calculation methodology configuration
# LAST_PRICE: Uses most recent transaction price
# AVERAGE_PRICE: Uses volume-weighted average price (VWAP)
# TOGGLE: Allows dynamic switching between methodologies
ENABLE_PRICE_TOGGLE=true
ENABLE_AVERAGE_PRICE_CALCULATION=true
DEFAULT_PRICE_MODE=LAST_PRICE
AVERAGE_PRICE_WINDOW_MINUTES=5

# Index-wise overview functionality (retained from previous version)
ENABLE_INDEX_OVERVIEW=true
INDEX_REFRESH_INTERVAL_SECONDS=30
INDEX_OVERVIEW_DEPTH=5

# ================================================================================================
# DATABASE CONFIGURATION - INFLUXDB WITH INFINITE RETENTION
# ================================================================================================

# InfluxDB connection settings for time-series market data storage
INFLUXDB_URL=http://localhost:8086

# MANUAL SETUP REQUIRED: InfluxDB token
# Generated during Docker setup - replace if using external InfluxDB instance
# This token provides read/write access to the InfluxDB database
INFLUXDB_TOKEN=VFEhioeCi2vFCtv-dH_7Fe6gEgNtO-Tu7qcQW4WvIbAFQIdKGa_hDu4dxatOgwskZcva4CHkeOPbjkQwAvPyVg==

INFLUXDB_ORG=op-trading
INFLUXDB_BUCKET=options-data

# INFINITE RETENTION POLICY - CRITICAL FOR REGULATORY COMPLIANCE
# This ensures all trading data is preserved permanently for:
# - Regulatory audit requirements
# - Long-term backtesting and analysis
# - Legal compliance and record keeping
# WARNING: Never change this to a time-limited value in production
INFLUXDB_RETENTION_POLICY=infinite
DATA_RETENTION_POLICY=infinite

# InfluxDB performance optimization settings
INFLUXDB_WRITE_BATCH_SIZE=1000
INFLUXDB_WRITE_FLUSH_INTERVAL_MS=1000
INFLUXDB_CONNECTION_POOL_SIZE=10
INFLUXDB_PRECISION=ms
INFLUXDB_MAX_RETRIES=3
INFLUXDB_RETRY_INTERVAL_MS=5000

# ================================================================================================
# REDIS CONFIGURATION - CACHING AND COORDINATION
# ================================================================================================

# Redis connection settings for high-performance caching and coordination
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=

# Redis performance and reliability settings
REDIS_CONNECTION_POOL_SIZE=20
REDIS_MAX_CONNECTIONS=50
REDIS_DEFAULT_TTL_SECONDS=3600
REDIS_CACHE_KEY_PREFIX=optrading
REDIS_SOCKET_TIMEOUT_SECONDS=5
REDIS_HEALTH_CHECK_INTERVAL_SECONDS=30

# Redis coordination for distributed processing
ENABLE_REDIS_COORDINATION=true
REDIS_LOCK_TIMEOUT_SECONDS=300
REDIS_LOCK_RETRY_DELAY_MS=100

# ================================================================================================
# API SERVICE CONFIGURATION
# ================================================================================================

# FastAPI server configuration
API_HOST=0.0.0.0
API_PORT=8000
API_WORKERS=4
API_RELOAD=true

# API performance and timeout settings
API_REQUEST_TIMEOUT_SECONDS=30
API_KEEP_ALIVE_TIMEOUT_SECONDS=5
API_MAX_CONNECTIONS=100

# API rate limiting to prevent abuse
API_RATE_LIMITING_ENABLED=true
API_RATE_LIMIT_PER_MINUTE=100
API_RATE_LIMIT_PER_HOUR=1000

# CORS configuration for web application integration
API_CORS_ENABLED=true
API_CORS_ORIGINS=http://localhost:3000,http://localhost:8080,http://localhost:3001

# ================================================================================================
# SECURITY AND AUTHENTICATION CONFIGURATION
# ================================================================================================

# Security feature enablement
SECURITY_ENABLED=true

# JWT token configuration for API authentication
# CRITICAL SECURITY: Change API_SECRET_KEY to a unique, cryptographically secure key
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
API_SECRET_KEY=CHANGE_THIS_TO_SECURE_SECRET_KEY
JWT_EXPIRATION_HOURS=24
JWT_ALGORITHM=HS256
JWT_REFRESH_THRESHOLD_HOURS=2

# API key authentication for programmatic access
ENABLE_API_KEYS=true
API_KEY_EXPIRATION_DAYS=365
API_KEY_PREFIX=optrading_

# Session management configuration
SESSION_TIMEOUT_HOURS=8
SESSION_CLEANUP_INTERVAL_HOURS=1
ENABLE_SESSION_TRACKING=true

# ================================================================================================
# MONITORING AND HEALTH CHECKS CONFIGURATION
# ================================================================================================

# Health monitoring system configuration
ENABLE_HEALTH_CHECKS=true
HEALTH_CHECK_INTERVAL_SECONDS=15
AUTO_RESTART_ENABLED=true
HEALTH_CHECK_TIMEOUT_SECONDS=10

# Error detection and automated recovery
ENABLE_ERROR_DETECTION_PANELS=true
ENABLE_AUTOMATED_ERROR_RECOVERY=true
ERROR_DETECTION_SENSITIVITY=NORMAL
ERROR_RECOVERY_MAX_ATTEMPTS=3
ERROR_RECOVERY_BACKOFF_SECONDS=30

# Metrics collection and monitoring integration
ENABLE_METRICS_COLLECTION=true
PROMETHEUS_ENABLED=true
PROMETHEUS_PORT=8080
METRICS_EXPORT_INTERVAL_SECONDS=15

# Grafana dashboard integration
GRAFANA_INTEGRATION_ENABLED=true
GRAFANA_URL=http://localhost:3000
GRAFANA_USER=admin
GRAFANA_PASSWORD=admin123

# MANUAL SETUP: Generate API key in Grafana UI after first login
# 1. Login to Grafana (http://localhost:3000)
# 2. Go to Configuration > API Keys
# 3. Create new key with Viewer or Editor role
# 4. Copy the key and replace the value below
GRAFANA_API_KEY=your_grafana_api_key_here

# ================================================================================================
# DATA ARCHIVAL AND BACKUP CONFIGURATION
# ================================================================================================

# Data archival settings - compress old data while preserving it
ENABLE_ARCHIVAL=true
ARCHIVAL_AFTER_DAYS=30
ARCHIVE_COMPRESSION_ENABLED=true
ARCHIVE_COMPRESSION_LEVEL=9
ARCHIVE_STORAGE_PATH=data/archive

# Automated backup configuration
ENABLE_AUTOMATED_BACKUP=true
BACKUP_INTERVAL_HOURS=24
BACKUP_RETENTION_DAYS=30
BACKUP_STORAGE_PATH=backups/
BACKUP_COMPRESSION_ENABLED=true

# Recovery and disaster recovery settings
RECOVERY_MODE=false
USE_BACKUP_CONFIG=false
ENABLE_BACKUP_DATA_SOURCE=true
SKIP_HEALTH_CHECKS=false

# ================================================================================================
# MANUAL CONFIGURATION SECTION - REQUIRES USER INPUT
# ================================================================================================

# ================================================================================================
# KITE CONNECT API CREDENTIALS - CRITICAL FOR LIVE MARKET DATA
# ================================================================================================
# 
# SETUP INSTRUCTIONS:
# 1. Visit https://kite.trade/connect/
# 2. Login with your Zerodha trading account credentials
# 3. Click "Create new app" and fill out the form:
#    - App name: OP Trading Platform
#    - App type: Connect
#    - Redirect URL: http://127.0.0.1:5000/success
#    - Description: Options trading analytics platform
# 4. After approval, copy the API Key and Secret below
# 5. Run the authentication setup: python integrated_kite_auth_logger.py --login
# 6. Complete the browser-based OAuth flow
# 7. Access token will be automatically saved and managed
#
# SECURITY NOTE: Keep these credentials secure and never share them

KITE_API_KEY=your_kite_api_key_here
KITE_API_SECRET=your_kite_api_secret_here
KITE_ACCESS_TOKEN=your_access_token_here
REDIRECT_URI=http://127.0.0.1:5000/success

# Kite Connect API configuration
KITE_TIMEOUT_SECONDS=30
KITE_MAX_RETRIES=3
KITE_RETRY_DELAY_SECONDS=1
KITE_RATE_LIMIT_PER_SECOND=10

# ================================================================================================
# EMAIL/SMTP CONFIGURATION - FOR ALERTS AND NOTIFICATIONS
# ================================================================================================
#
# GMAIL SETUP INSTRUCTIONS:
# 1. Enable 2-factor authentication on your Gmail account
# 2. Go to Google Account settings > Security > App passwords
# 3. Generate an app password for "OP Trading Platform"
# 4. Use your Gmail address and the generated app password below
#
# ALTERNATIVE EMAIL PROVIDERS:
# - Outlook: smtp.office365.com, port 587, TLS
# - Yahoo: smtp.mail.yahoo.com, port 587, TLS
# - Custom SMTP: Configure according to your provider's settings

SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USE_TLS=true
SMTP_USERNAME=your_email@gmail.com
SMTP_PASSWORD=your_gmail_app_password_here

# Alert recipient configuration by notification type
ALERT_RECIPIENTS=admin@company.com
CRITICAL_ALERT_RECIPIENTS=admin@company.com,cto@company.com
TRADING_ALERT_RECIPIENTS=trader@company.com
SYSTEM_ALERT_RECIPIENTS=sysadmin@company.com

# ================================================================================================
# SLACK INTEGRATION - FOR TEAM NOTIFICATIONS
# ================================================================================================
#
# SLACK WEBHOOK SETUP:
# 1. Go to https://api.slack.com/incoming-webhooks
# 2. Create a new Slack app for your workspace
# 3. Enable Incoming Webhooks feature
# 4. Create a webhook for your desired channel
# 5. Copy the webhook URL below

SLACK_ENABLED=false
SLACK_WEBHOOK_URL=your_slack_webhook_url_here
SLACK_CHANNEL=#trading-alerts
SLACK_USERNAME=OP Trading Bot

# ================================================================================================
# EXTERNAL INTEGRATIONS AND API KEYS
# ================================================================================================

# Alpha Vantage API for additional market data (optional)
ALPHA_VANTAGE_API_KEY=your_alpha_vantage_key_here
ALPHA_VANTAGE_ENABLED=false

# NewsAPI for market news sentiment analysis (optional)
NEWS_API_KEY=your_news_api_key_here
NEWS_API_ENABLED=false

# Polygon.io API for additional market data (optional)
POLYGON_API_KEY=your_polygon_api_key_here
POLYGON_ENABLED=false

# ================================================================================================
# ADVANCED CONFIGURATION FOR POWER USERS
# ================================================================================================

# Custom analytics configuration
CUSTOM_INDICATORS_ENABLED=true
CUSTOM_STRATEGIES_PATH=strategies/
ENABLE_BACKTESTING=true
BACKTEST_DATA_PATH=data/historical/

# Advanced performance tuning
ENABLE_ASYNC_PROCESSING=true
ASYNC_WORKER_COUNT=4
ENABLE_BATCH_PROCESSING=true
BATCH_QUEUE_SIZE=1000

# Development and debugging features
ENABLE_API_DOCS=true
ENABLE_DEBUG_ENDPOINTS=true
ENABLE_PROFILING=false
PROFILING_OUTPUT_PATH=logs/profiling/

# ================================================================================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# ================================================================================================

# SSL/TLS configuration for production
SSL_ENABLED=false
SSL_CERT_PATH=ssl/cert.pem
SSL_KEY_PATH=ssl/key.pem

# Load balancing and scaling configuration
ENABLE_LOAD_BALANCING=false
MAX_CONCURRENT_REQUESTS=1000
REQUEST_QUEUE_SIZE=10000

# Testing and development overrides
TEST_MODE=false
TEST_USE_LIVE_DATA=false
TEST_REDIS_DB=15

# ================================================================================================
# DOCKER AND CONTAINERIZATION SETTINGS
# ================================================================================================

# Docker service URLs (used when running in containers)
DOCKER_INFLUXDB_URL=http://op-influxdb:8086
DOCKER_REDIS_URL=redis://op-redis:6379/0
DOCKER_PROMETHEUS_URL=http://op-prometheus:9090
DOCKER_GRAFANA_URL=http://op-grafana:3000

# Container health check settings
CONTAINER_HEALTH_CHECK_INTERVAL=30
CONTAINER_RESTART_POLICY=unless-stopped

# ================================================================================================
# END OF CONFIGURATION FILE
# ================================================================================================
# Configuration file template: 2025-08-25 2:28 PM IST
# 
# NEXT STEPS AFTER COPYING TO .env:
# 1. Replace ALL values marked with "your_*_here" with actual values
# 2. Generate secure API_SECRET_KEY: python -c "import secrets; print(secrets.token_urlsafe(32))"
# 3. Set up Kite Connect credentials from https://kite.trade/connect/
# 4. Configure email settings for notifications
# 5. Review resource limits based on your system specifications
# 6. Run the setup script: python complete_python_setup.py development
# 7. Complete authentication: python integrated_kite_auth_logger.py --login
# 8. Start the application: python main.py
#
# SECURITY CHECKLIST:
# □ All credentials replaced with real values
# □ API_SECRET_KEY is cryptographically secure
# □ SMTP credentials are app passwords, not account passwords
# □ .env file is in .gitignore and never committed to version control
# □ File permissions are restrictive (600 or 640)
# □ Backup copies of .env are stored securely
#
# For support and troubleshooting:
# - Setup logs: logs/setup/
# - Application logs: logs/application/
# - Documentation: README.md
# - Error recovery: Check error_detection endpoints for suggestions